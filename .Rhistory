devtools::install_github('edzer/sfr')
devtools::install_github('edzer/sfr')
devtools::install_github('edzer/sfr', , args = c(--configure-args='--with-udunits2-include=/usr/include/udunits2'))
devtools::install_github('edzer/sfr', , args = c("--configure-args='--with-udunits2-include=/usr/include/udunits2'"))
devtools::install_github('edzer/sfr')
devtools::install_github('edzer/sfr', args = c("--configure-args='--with-udunits2-include=/usr/include/udunits2'"))
install.packages('udunits2',configure.args='--with-udunits2-include=/usr/include/udunits2')
devtools::install_github('edzer/sfr')
devtools::install_github('edzer/sfr')
devtools::install_github('edzer/sfr')
devtools::install_github('edzer/sfr')
devtools::install_github('edzer/sfr')
devtools::install_github('edzer/sfr')
temp_by_height <- function(height_1, height_2, temp_1){
diff_height <- height_1 - height_2
diff_temp <- (diff_height/100) * 0.6
temp_2 <- temp_1 + diff_temp
temp_2
}
temp_by_height(height_1=1000, height_2=2400, temp_1=20)
library('checkpoint')
checkpoint("2015-06-09")
library('checkpoint')
checkpoint("2015-06-09", scanForPackages=FALSE)
library('Matrix')
install.packages('Matrix')
library('caret')
library(tidyverse)
?mutate_all
library(devtools)
install_github("edzer/sfr")
library('sf')
data(package='sf')
library('sf')
nc = st_read(system.file("shape/nc.shp", package="sf"))
summary(nc)
library('sf')
nc = st_read(system.file("shape/nc.shp", package="sf"), quiet=TRUE)
st_write(nc, 'my_file.gpkg')
st_write(nc, 'my_file.gpkg')
st_write(nc, 'my_file.gpkg', update = TRUE)
st_write(nc, 'my_file.gpkg', layer_options = 'OVERWRITE=YES')
st_write(nc, 'my_file.gpkg', layer_options = 'OVERWRITE=YES', update = TRUE)
my_file = st_read('my_file.gpkg', quiet=TRUE)
my_file
library(sf)
library(sf)
library(tidyverse)
library(ggmap)
data(crime)
crime_sf = st_as_sf(crime, coords = c("lon", "lat"), crs = 4326)
crime_sf %>%
cbind(., st_coordinates(.)) %>%
st_set_geometry(., 'NULL')
crime_sf %>%
st_as_sf() %>%
cbind(., st_coordinates(.)) %>%
st_set_geometry(., 'NULL')
crime_sf %>%
st_as_sf()
crime_sf %>%
cbind(., st_coordinates(.)) %>%
st_set_geometry('NULL')
devtools::install_github('edzer/sfr')
library(sf)
library(tidyverse)
library(ggmap)
data(crime)
crime_sf = st_as_sf(crime, coords = c("lon", "lat"), crs = 4326)
crime_sf %>%
cbind(., st_coordinates(.)) %>%
st_set_geometry('NULL')
st_read()
world_st2 = world_st2 %>% st_set_geometry(NULL)
class(world_st2)
nc = st_read(system.file("shape/nc.shp", package="sf"))
nc2 = nc %>% st_set_geometry(NULL)
class(nc2)
crime_sf %>%
cbind(., st_coordinates(.)) %>%
st_set_geometry(NULL)
crime_sf %>%
cbind(., st_coordinates(.)) %>%
st_set_geometry(NULL) %>%
write_csv(., 'my_file.csv')
crime %>%
st_as_sf(., coords = c("lon", "lat"), crs = 4326) %>%
cbind(., st_coordinates(.)) %>%
st_set_geometry(NULL) %>%
write_csv(., 'my_file.csv')
library(sf)
library(tidyverse)
data(meuse, package = "sp")
meuse_sf = st_as_sf(meuse, coords = c("x", "y"), crs = 28992, agr = "constant")
meuse_sf %>% str
meuse_sf %>%
group_by(soil) %>%
summarise(mean_soil=mean(soil))
meuse_sf %>%
group_by(soil) %>%
summarise(mean_soil=mean(soil, na.rm=TRUE))
meuse_sf %>%
group_by(soil) %>%
summarise()
meuse_sf
aggregate_meuse_sf <- meuse_sf %>%
group_by(soil) %>%
summarise()
plot(aggregate_meuse_sf)
plot(aggregate_meuse_sf)
install.packages('shony')
library(devtools)
install_github("mtennekes/tmaptools")
install_github("mtennekes/tmap")
install.packages('shiny')
library(ggplot2)
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
df <- data.frame(
gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30)
)
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
ds <- plyr::ddply(df, "gp", plyr::summarise, mean = mean(y), sd = sd(y))
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
ggplot() +
geom_point(data = df, aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3) +
geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'red',
width = 0.4
)
ggplot(df) +
geom_point(aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3)
data(package='ggplot2')
data("midwest")
data("midwest")
midwest
ggplot(midwest) +
geom_point(aes(popdensity, percbcollege)) +
facet_wrap(~state)
ggplot(midwest) +
geom_point(aes(popdensity, percollege)) +
facet_wrap(~state)
ggplot(midwest) +
geom_point(aes(popdensity, percollege)) +
facet_wrap(~state) +
theme_bw()
ggplot(midwest) +
geom_point(aes(popdensity, percbelowpoverty)) +
facet_wrap(~state) +
theme_bw()
ggplot(midwest) +
geom_point(aes(popdensity, poptotal)) +
facet_wrap(~state) +
theme_bw()
ggplot(midwest) +
geom_point(aes(poptotal, percollege)) +
facet_wrap(~state) +
theme_bw()
ggplot(midwest) +
geom_point(aes(poptotal, percadultpoverty)) +
facet_wrap(~state) +
theme_bw()
ggplot(midwest) +
geom_point(aes(popdensity, percadultpoverty)) +
facet_wrap(~state) +
theme_bw()
library(ggplot2)
data("midwest")
ggplot(midwest) +
geom_point(aes(popdensity, percadultpoverty)) +
facet_wrap(~state) +
theme_bw()
as(st_point(c(0, 1)), "Spatial")
library(sf)
as(st_point(c(0, 1)), "Spatial")
as(st_point(c(0, 1), c(1,1)), "Spatial")
st_point(c(0, 1), c(1,1))
xx <- st_point(c(0, 1))
as(xx, "Spatial")
library(s[])
library(sp)
library(s[])
as(xx, "Spatial")
install.packages("aws.polly", repos = c(getOption("repos"), "http://cloudyr.github.io/drat"))
library("aws.polly")
list_voices()
library("aws.polly")
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAI72QYXYPCAXZ5X2A ",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
list_voices()
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAI72QYXYPCAXZ5X2A ",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2",
"AWS_SESSION_TOKEN" = "mytoken")
list_voices()
library("aws.polly")
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAI72QYXYPCAXZ5X2A ",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2",
"AWS_SESSION_TOKEN" = "mytoken")
list_voices()
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAI72QYXYPCAXZ5X2A ",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
list_voices()
library(ari)
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAI72QYXYPCAXZ5X2A ",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
list_voices()
library(aws.polly)
library(ari)
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAI72QYXYPCAXZ5X2A ",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
list_voices()
use_credentials()
library(aws.polly)
library(ari)
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAI72QYXYPCAXZ5X2A ",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
use_credentials()
list_voices()
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAI72QYXYPCAXZ5X2A",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
use_credentials()
list_voices()
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAI72QYXYPCAXZ5X2A",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
list_voices()
list_voices(language = "cy-GB")
library(aws.polly)
library(ari)
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAI72QYXYPCAXZ5X2A",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
list_voices()
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAI72QYXYPCAXZ5X2A",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-2")
list_voices()
library("sf", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.4")
caret::train(y~1,data=data.frame(y=runif(100)))
train(y~1,data=data.frame(y=runif(100)))
library(caret)
train(y~1,data=data.frame(y=runif(100)))
data.frame(y=runif(100)
data.frame(y=runif(100))
data.frame(y=runif(100))
train(form = y~1,data=data.frame(y=runif(100)))
train(form = as.formula(y~1), data=data.frame(y=runif(100)))
train(form = as.formula(y~I(1), data=data.frame(y=runif(100)))
train(y~I(1),data=data.frame(y=runif(100)))
train(y ~ 1,data=data.frame(y=runif(100)))
train(y ~ 1,data=data.frame(y=runif(100), x))
train(y ~ 1,data=data.frame(y=runif(100), x=NA))
data.frame(y=runif(100), x=NA)
120 * 1000 / 3600
10
1000 / 60
(1000 / 3600)
library(sf)
nc <- read_sf(system.file("shape/nc.shp", package = "sf"))
nc_simple <- nc %>%
st_transform(32119) %>%
st_simplify(dTolerance = 1)
# Try to get the centroid (succeeds)
st_centroid(nc_simple, of_largest_polygon = FALSE)
# Now try the same process but with `of_largest_polygon = TRUE` (fails)
st_centroid(nc_simple, of_largest_polygon = TRUE)
library("rasterVis")
library("latticeExtra")
data("dem", package = "RQGIS")
# create hillshade
hs = hillShade(slope = terrain(dem, "slope"), aspect = terrain(dem, "aspect"))
rect <- tmaptools::bb_sp(hs)
bbx <- tmaptools::bb(hs, xlim = c(-.02, 1), ylim = c(-.02, 1), relative = TRUE)
tm_shape(hs, bbox = bbx) +
tm_grid(col = "black", n.x = 2, n.y = 2, labels.inside.frame = FALSE,
labels.rot = c(0, 90)) +
tm_raster(palette = gray(0:100 / 100), n = 100, legend.show = FALSE) +
tm_shape(dem) +
tm_raster(alpha = 0.5, palette = terrain.colors(25),
auto.palette.mapping = FALSE, legend.show = FALSE) +
tm_shape(cn) +
tm_lines(col = "white") +
tm_text("level", col = "white") +
qtm(rect, fill = NULL) +
tm_layout(outer.margins = c(0.04, 0.04, 0.02, 0.02), frame = FALSE)
library(tmap)
library(rasterVis)
library(latticeExtra)
data("dem", package = "RQGIS")
# createa  hillshade
hs <- hillShade(slope = terrain(dem, "slope"), aspect = terrain(dem, "aspect"))
rect <- tmaptools::bb_sp(hs)
bbx <- tmaptools::bb(hs, xlim = c(-.02, 1), ylim = c(-.02, 1), relative = TRUE)
tm_shape(hs, bbox = bbx) +
tm_grid(col = "black", n.x = 2, n.y = 2, labels.inside.frame = FALSE,
labels.rot = c(0, 90)) +
tm_raster(palette = gray(0:100 / 100), n = 100, legend.show = FALSE) +
tm_shape(dem) +
tm_raster(alpha = 0.5, palette = terrain.colors(25),
auto.palette.mapping = FALSE, legend.show = FALSE) +
tm_shape(cn) +
tm_lines(col = "white") +
tm_text("level", col = "white") +
qtm(rect, fill = NULL) +
tm_layout(outer.margins = c(0.04, 0.04, 0.02, 0.02), frame = FALSE)
# create contour
cn <- rasterToContour(dem)
rect <- tmaptools::bb_sp(hs)
bbx <- tmaptools::bb(hs, xlim = c(-.02, 1), ylim = c(-.02, 1), relative = TRUE)
tm_shape(hs, bbox = bbx) +
tm_grid(col = "black", n.x = 2, n.y = 2, labels.inside.frame = FALSE,
labels.rot = c(0, 90)) +
tm_raster(palette = gray(0:100 / 100), n = 100, legend.show = FALSE) +
tm_shape(dem) +
tm_raster(alpha = 0.5, palette = terrain.colors(25),
auto.palette.mapping = FALSE, legend.show = FALSE) +
tm_shape(cn) +
tm_lines(col = "white") +
tm_text("level", col = "white") +
qtm(rect, fill = NULL) +
tm_layout(outer.margins = c(0.04, 0.04, 0.02, 0.02), frame = FALSE)
setwd("~/Documents/drat")
drat::insertPackage("../spDataLarge_0.2.5.0.tar.gz")
drat::insertPackage("../spDataLarge_0.2.5.0.tar.gz", ".")
